@page "/"
@using System.Web
@using TerseLang;
@using TerseLang.Expressions;
@inject NavigationManager NavManager
@inject IJSRuntime JS
@using Microsoft.AspNetCore.WebUtilities
@using System.Text;

<div id="main">
    <h1 style="display:inline; margin-right: 20px">Terse</h1>

    <button class="topbutton" @onclick="@Run"><span class="@(running ? "spinner-border" : "oi oi-media-play s-24") text-white"></span> Run</button>
    <button class="topbutton" @onclick="@CopyLinkToClipboard"><span class="oi oi-link-intact s-24 text-white"></span> Link</button>
    <section>
        <h2><b>CODE</b> - @this.code.Length byte@(this.code.Length == 1 ? "" : "s")</h2>
        <div class="position-relative" id="edit-wrapper">
            <textarea autofocus rows="@(Math.Max(code.Split('\n').Length, 5))" placeholder="code here" @bind="code" @bind:event="oninput" id="editor"></textarea>
            <div id="backdrop">@((MarkupString)Markup(code))</div>
        </div>
    </section>

    <section>
        <h2><b>INPUT</b></h2>
        <span class="add-remove" @onclick="@(_ => input.Add(""))">+ add</span>
        @for (int i = 0; i < input.Count; i++) {
            int j = i;
            <div style="display:block">
                <span class="add-remove" @onclick="@(_ => input.RemoveAt(j))" style="float: right">- remove</span>
                <textarea oninput="this.style.height = 'auto'; this.style.height = (this.scrollHeight) + 'px';" @bind="input[j]" rows="1"></textarea>
            </div>
        }
    </section>
    <section>
        <h2><b>OUTPUT</b></h2>
        <div class="textbox">@output</div>
    </section>

    <section>
        <h2><b>ERROR INFO</b></h2>
        <div class="textbox">@error</div>
    </section>
    <section>
        <h2><b>PARSER OUTPUT</b></h2>
        <div style="display:inline-block; float:right; position:relative;" @onclick="@ShowParsed">
            <h2><b>Generate</b> <span class="oi oi-media-play text-white"></span></h2>
        </div>
        <div class="textbox">@((MarkupString)System.Text.RegularExpressions.Regex.Replace(HttpUtility.HtmlEncode(parsed), "\r?\n|\r", "<br />"))</div>
    </section>

</div>
<Documentation OnCodeCharClicked="@(c => { code += c; this.StateHasChanged(); })"></Documentation>

@code {
    string code = "", output = "", error = "", parsed = "";
    List<string> input = new List<string> { };

    protected override void OnInitialized() {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        var queryStrings = QueryHelpers.ParseQuery(uri.Query);
        if (queryStrings.TryGetValue("code", out var unprocessed)) {
            try {
                var unprocessedCode = (string)unprocessed;
                unprocessedCode = unprocessedCode.Replace('_', '/').Replace('-', '+');
                Console.WriteLine(unprocessedCode);
                var bytes = Convert.FromBase64String(unprocessedCode.PadRight(unprocessedCode.Length + (4 - unprocessedCode.Length % 4) % 4, '='));
                code = string.Concat(bytes.Select(l => TerseLang.Constants.CHARSET[l]));
            }
            catch(Exception e) {
                Console.WriteLine(e);
            }
        }
        if(queryStrings.TryGetValue("in", out var inputs)) {
            var arr = (String[])inputs;
            input = arr.Select(x => {
                x = x.Replace('_', '/').Replace('-', '+');
                var bytes = Convert.FromBase64String(x.PadRight(x.Length + (4 - x.Length % 4) % 4, '='));
                return Encoding.UTF8.GetString(bytes);

            }).ToList();
        }
        StateHasChanged();
    }

    string Markup(string str) {
        string markup = "";
        bool inStr = false;
        foreach(var c in str) {
            if (c == Constants.STRING_DELIMITER) {
                inStr = !inStr;
            }

            string css = "markup ";
            if (inStr)
                css += "string";
            else if (Constants.TIER_ZERO.Contains(c))
                css += "tier0";
            else if (Constants.TIER_ONE.Contains(c))
                css += "tier1";
            else if (Constants.TIER_TWO.Contains(c))
                css += "tier2";
            else if (Constants.TIER_UNLIMITED.Contains(c))
                css += "tierunlimited";
            else if (Constants.UNARY_FUNCTIONS.Contains(c))
                css += "unary";
            markup += $"<span class=\"{css}\">" + c + "</span>";
        }
        return markup;
    }

    void ShowParsed() {
        List<TerseLang.Expressions.Expression> ast = Parser.Parse(code);
        parsed = ObjectDumper.Dump(ast);
    }

    bool running = false;
    int timeout = 10000;
    async Task Run() {
        running = true;
        output = "";
        try {
            error = "";

            var inputs = input.Select(x => {
                try {
                    if (x == "") return "";
                    return TerseLang.Program.ParseInput(x);
                }
                catch {
                    error = $"Cannot parse input: {x}. Input ignored\n";
                    return null;
                }

            }).Where(x => x != null).ToArray();


            try {
                var result = await Task.Run(() => new Interpreter(code, inputs).Interpret()).WaitAsync(TimeSpan.FromMilliseconds(timeout));
                StateHasChanged();
                if (result != null) {
                    if (result is List<dynamic> d) output = d.DListToString();
                    else output = result.ToString();
                }
            }
            catch(TimeoutException) {
                error = "Timeout. Code took more than " + (timeout / 1000d) + " seconds to execute.";
            }

        }
        catch (TerseLang.InternalErrorException e) {
            Console.WriteLine(e);
            error = e.ToString();
        }
        catch (Exception e) {
            Console.WriteLine(e.ToString());

            error = e.ToString();
        }
        running = false;
        StateHasChanged();
    }

    void CopyLinkToClipboard() {
        string encodedCode = Convert.ToBase64String(code.Select(x => (byte)TerseLang.Constants.CHARSET.IndexOf(x)).ToArray());
        encodedCode = encodedCode.TrimEnd('=').Replace('+', '-').Replace('/', '_');
        string[] encodedInputs = input.Select(x => "in=" + Convert.ToBase64String(Encoding.UTF8.GetBytes(x))
                                    .TrimEnd('=').Replace('+', '-').Replace('/', '_')).ToArray();
        string query = "?";
        if (encodedCode != "") query += "code=" + encodedCode;
        if (encodedInputs.Length != 0) query += (query == "?" ? "" : "&") + string.Join("&", encodedInputs);
        JS.InvokeVoidAsync("copyToClipboard", NavManager.BaseUri + query);
    }
} 