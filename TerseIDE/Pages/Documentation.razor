@inject HttpClient Http
@using System.Text.Json;
@using System.Threading
@inject IJSRuntime JS

<article id="docs">
    @if (docPage == null) {
        <span style="color:white;">Loading...</span>
    }
    else {

        //Load!

        <div id="doc-topbar">
            <span class="topbar-item" id="section-title">Functions</span>
        </div>

        <article id="docs-body">
            @((MarkupString)string.Join("<br>", @docPage.Intro))
            @foreach (var func in docPage.Unary) {
                if (func.Description[0] != "") {
                    <div class="func-header" @onclick="@(() => OnCodeCharClicked(func.Name[0].ToString()))">@func.Name</div>
                    <div>@((MarkupString)string.Join("<br>", @func.Description))</div>
                }
            }
            @foreach (var func in docPage.Binary) {
                if (func.Description[0] != "") {
                    <div class="func-header" @onclick="@(() => OnCodeCharClicked(func.Name[0].ToString()))">
                        @func.Name
                        <span style="float:right">
                            @foreach (var tChar in func.Tiers) {
                                <code @onclick="@(() => OnCodeCharClicked(tChar))" @onclick:stopPropagation="true">@tChar</code>
                            }
                        </span>
                    </div>
                    <div>@((MarkupString)string.Join("<br>", @func.Description))</div>
                }
            }
        </article>

    }
</article>


@code {
    [Parameter]
    public Action<string> OnCodeCharClicked { get; set; }
    DocPage docPage;
    public class DocPage {
        public string[] Intro { get; set; }
        public UnaryFunc[] Unary { get; set; }
        public BinaryFunc[] Binary { get; set; }
    }
    public class UnaryFunc {
        public string Name { get; set; }
        public string[] Description { get; set; }
        public string Details { get; set; }
    }
    public class BinaryFunc {
        public string Name { get; set; }
        public string[] Description { get; set; }
        public string Details { get; set; }
        public string[] Tiers { get; set; }
    }

    protected async override Task OnInitializedAsync() {
        docPage = await Http.GetFromJsonAsync<DocPage>("docs/page.json", new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
    }
}